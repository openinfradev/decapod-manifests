# Source: cluster-api-aws/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cluster.local-capi-aws
  namespace: argo
data:
  generate_worker_machines.py: |
    #!/usr/local/bin/python3
    import sys, yaml, os, time
    
    def get_subnets(stream):
      subnets=[]
      try:
        parsed = yaml.safe_load(stream)
        if (parsed['apiVersion'] == 'infrastructure.cluster.x-k8s.io/v1alpha3'):
          for entry in parsed['spec']['networkSpec']['subnets']:
            if not entry['isPublic']:
              subnets.append(entry['id'])
        else:
          for entry in parsed['spec']['network']['subnets']:
            if not entry['isPublic']:
              subnets.append(entry['id'])
    
      except yaml.YAMLError as exc:
        print(exc)
      except TypeError as exc:
        print(exc)
    
      return subnets
    
    def apply_resources(machine_resources, name):
      if machine_resources is not None:
        yaml_filename = name + ".yaml"
        f = open(yaml_filename, 'a')
        for machine in machine_resources:
          for resource in machine_resources[machine]:
            f.write('---\n')
            f.write(yaml.dump(machine_resources[machine][resource]))
    
        f.close()
        os.system('kubectl apply -n {0} -f {1}'.format(sys.argv[2], yaml_filename))
    
    def gen_machinepool_resources(subnets):
      subnetd=[]
      for subnet in subnets:
        subnetd.append({'id': subnet})
    
      try:
        machinepools = yaml.safe_load(open('mp.raw.yaml', 'r'))
    
        for resource in machinepools:
          machinepools[resource]['AMP']['spec']['subnets']=subnetd
    
      except yaml.YAMLError as exc:
        print(exc)
      except TypeError as exc:
        print(exc)
    
      apply_resources(machinepools, "mps")
    
    def gen_machinedeployment_resource(subnets):
      subnetd=[]
      for subnet in subnets:
        subnetd.append({'id': subnet})
      try:
        machinedeployments = yaml.safe_load(open('md.raw.yaml', 'r'))
    
        for resource in machinedeployments:
          machinedeployments[resource]['AWSMachineTemplate']['spec']['template']['spec']['subnet']=subnetd[resource]
      except yaml.YAMLError as exc:
        print(exc)
      except TypeError as exc:
        print(exc)
    
      apply_resources(machinedeployments, "mds")
    
    def main(argv):
      stream = os.popen('kubectl get awscluster -n {1} {0} -o yaml'.format(sys.argv[1],sys.argv[2]))
      subnets = get_subnets(stream)
    
      gen_machinepool_resources(subnets)
      gen_machinedeployment_resource(subnets)
    
    if __name__ == "__main__":
      main(sys.argv[1:])
    

  node_label.py: |
    

  mp.raw.yaml: |
    
    taco:
      MP:
        apiVersion: cluster.x-k8s.io/v1beta1
        kind: MachinePool
        metadata:
          name: cluster.local-taco-mp-0
          namespace: argo
        spec:
          clusterName: cluster.local
          replicas: 3
          template:
            metadata:
              labels:
                servicemesh: enabled
                taco-ingress-gateway: enabled
                taco-lma: enabled
            spec:
              bootstrap:
                configRef:
                  apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
                  kind: KubeadmConfig
                  name: cluster.local-taco-mp-0
                  namespace: argo
              clusterName: cluster.local
              infrastructureRef:
                apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
                kind: AWSMachinePool
                name: cluster.local-taco-mp-0
                namespace: argo
              version: v1.22.5
      AMP:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AWSMachinePool
        metadata:
          name: cluster.local-taco-mp-0
          namespace: argo
        spec:
          availabilityZones:
          - CHANGEME
          awsLaunchTemplate:
            instanceType: t3.2xlarge
            sshKeyName: CHANGEME
            iamInstanceProfile: "nodes.cluster-api-provider-aws.sigs.k8s.io"
            rootVolume:
              size: 200
              type: gp2
          maxSize: 16
          minSize: 1
      KAC:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfig
        metadata:
          name: cluster.local-taco-mp-0
          namespace: argo
        spec:
          joinConfiguration:
            nodeRegistration:
              kubeletExtraArgs:
                cloud-provider: aws
              name: '{{ ds.meta_data.local_hostname }}'
    

  md.raw.yaml: |
    
    

  argo-register.sh: |
    #!/bin/bash
    set -ex
    
    kubectl get secret -n argo decapod-argocd-config  -o yaml | grep ARGO_ > argo.secret
    ARGO_SERVER=$(cat argo.secret | grep ARGO_SERVER | awk '{print $2}' | base64 -d)
    ARGO_USERNAME=$(cat argo.secret | grep ARGO_USERNAME | awk '{print $2}' | base64 -d)
    ARGO_PASSWORD=$(cat argo.secret | grep ARGO_PASSWORD | awk '{print $2}' | base64 -d)
    
    yes | argocd login --insecure $ARGO_SERVER --username $ARGO_USERNAME --password $ARGO_PASSWORD
    mkdir -p ~/.kube
    KUBECONFIG="/kube.config" kubectl config view --merge --flatten > ~/.kube/config
    CONTEXT_NAME=$(kubectl --kubeconfig=/kube.config config view -o jsonpath='{.current-context}')
    
    while [ $(kubectl get no | wc -l) == 0 ]
    do
        echo "> Wait for cluster is ready (1s)"
        sleep 1
    done
    
    if [ $(argocd cluster list | grep \ $1\ | wc -l ) == 0 ]; then
        argocd cluster add $CONTEXT_NAME --name $1 --upsert
    else
        echo "Warning: $1 is already registered on argo-cd server. If unintended, it may occure woring operations."
    fi
    

  wait_for_kubeconfig.sh: |
    #!/bin/bash
    set -ex
    
    while  [ $(kubectl get secret -n $2 $1-kubeconfig --ignore-not-found | wc -l) == 0 ]; do
      echo "sleep 1 second"
      sleep 1
    done
    

  wait_and_k8s_init.sh: |
    #!/bin/bash
    set -ex
    
    # if taconode is set
    if [ $4 = 'true' ]; then
      echo "> Wait for machinepoool $1-$2-mp-0 generated"
      while [ $(kubectl get machinepool -n $3 $1-$2-mp-0 --ignore-not-found | wc -l) == 0 ]
      do
        echo "> Wait for machinepools deployed (1s)"
        sleep 1
      done
    
      replicas=$( kubectl get machinepool -n $3 $1-$2-mp-0  -o jsonpath='{.spec.replicas}' )
      while [ $(kubectl get machinepool -n $3 $1-$2-mp-0 -o=jsonpath='{.status.nodeRefs}'|jq|grep uid|wc -l) != $replicas ]
      do
        echo "> Wait for instance is ready (1s)"
        sleep 1
      done
    
      for node in $(kubectl get machinepool -n $3 $1-$2-mp-0 -o=jsonpath='{.status.nodeRefs}'|jq | grep '"name":'| awk -F \" '{print $4}')
      do
        kubectl --kubeconfig=/kube.config label node $node taco-lma=enabled taco-ingress-gateway=enabled taco-egress-gateway=enabled servicemesh=enabled --overwrite
      done
    
      cat <<EOF >/taco-system.yaml
    apiVersion: v1
    kind: Namespace
    metadata:
      labels:
        name: taco-system
      name: taco-system
    EOF
    
      kubectl --kubeconfig=/kube.config apply -f /taco-system.yaml
    fi
    
    # if argo-registeration is set
    if [ $5 = 'true' ]; then 
      /argo-register.sh $1
    fi
    

  delete_from_yaml_raw.py: |
    #!/usr/local/bin/python3
    import sys, yaml, os, time
    
    def main(argv):
      try:
        parsed = yaml.safe_load(open(sys.argv[1], 'r'))
        for group in parsed:
          for resource in parsed[group]:
            os.system('kubectl delete {0} -n {1} {2}'.format(
              parsed[group][resource]['kind'],
              parsed[group][resource]['metadata']['namespace'],
              parsed[group][resource]['metadata']['name']
            ))
        for group in parsed:
          for resource in parsed[group]:
            os.system('''C=0;
              while [ $(kubectl get {0} -n {1} {2} --ignore-not-found | grep {2} | wc -l) -eq 1 ]; 
              do 
                echo wait for disappearance of {2} _$C; 
                C=$(($C+1));
                sleep 2; 
              done'''.format(
              parsed[group][resource]['kind'],
              parsed[group][resource]['metadata']['namespace'],
              parsed[group][resource]['metadata']['name']
            ))
      except yaml.YAMLError as exc:
        print(exc)
      except TypeError as exc:
        print(exc)
    if __name__ == "__main__":
      main(sys.argv[1:])
